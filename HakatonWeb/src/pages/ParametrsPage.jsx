import React, { useEffect, useState } from 'react';
import {
    fetchParameters,
    createParameter,
    updateParameter,
    deleteParameter
} from '../API/ParametrsAPI/ParametrsAPI.js';
import '../css/ParametrsPage/ParametrsPage.css';

function ParametrsPage() {
    const [parameters, setParameters] = useState([]);
    const [search, setSearch] = useState('');
    const [statusFilter, setStatusFilter] = useState('–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã');
    const [modalOpen, setModalOpen] = useState(false);
    const [loading, setLoading] = useState(true);
    const [filteredParameters, setFilteredParameters] = useState([]);


    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const [currentParam, setCurrentParam] = useState({
        id: '',
        value: '',
        name: '',
        description: '',
        status: '–ê–∫—Ç–∏–≤–µ–Ω'
    });

    // –§–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const [isEditing, setIsEditing] = useState(false);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
    useEffect(() => {
        loadParameters();
    }, []);

    useEffect(() => {
        if (!parameters) return;
        setFilteredParameters(parameters.filter(param =>
            (param.name.toLowerCase().includes(search.toLowerCase()) ||
                param.id.toLowerCase().includes(search.toLowerCase())) &&
            (statusFilter === '–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã' || param.status === statusFilter)
        ));
    }, [parameters, search, statusFilter]);


    const loadParameters = async () => {
        setLoading(true);
        try {
            const data = await fetchParameters();
            setParameters(Array.isArray(data) ? data : []);  // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined/null
        } catch (error) {
            console.error(error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
        } finally {
            setLoading(false);
        }
    };


    // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const openNewParamModal = () => {
        setCurrentParam({ id: '', value: '', name: '', description: '', status: '–ê–∫—Ç–∏–≤–µ–Ω' });
        setIsEditing(false);
        setModalOpen(true);
    };

    // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const openEditParamModal = (param) => {
        setCurrentParam(param);
        setIsEditing(true);
        setModalOpen(true);
    };

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (—Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å)
    const handleSaveParam = async (e) => {
        e.preventDefault();
        try {
            if (isEditing) {
                await updateParameter(currentParam.id, currentParam);
                setParameters(prev => prev.map(p => (p.id === currentParam.id ? currentParam : p)));
            } else {
                const newParam = await createParameter(currentParam);
                setParameters(prev => [...prev, newParam]);
            }
            setModalOpen(false);
        } catch (error) {
            console.error(error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞');
        }
    };

    // –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä
    const handleDeleteParam = async (id) => {
        if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä?')) return;
        try {
            await deleteParameter(id);
            setParameters(prev => prev.filter(p => p.id !== id));
        } catch (error) {
            console.error(error);
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞');
        }
    };

    return (
        <>
            {parameters ?
                (
                    <div className="parameters-page">
                        <div className="stats-row">
                            <div className="stats-card">
                                <div className="stats-label">–í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</div>
                                <div className="stats-value">{parameters.length}</div>
                            </div>
                            <div className="stats-card">
                                <div className="stats-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                                <div className="stats-value">{parameters.filter(p => p.status === '–ê–∫—Ç–∏–≤–µ–Ω').length}</div>
                            </div>
                            <div className="stats-card">
                                <div className="stats-label">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</div>
                                <div className="stats-value">{parameters.filter(p => p.status !== '–ê–∫—Ç–∏–≤–µ–Ω').length}</div>
                            </div>
                            <div className="stats-card">
                                <div className="stats-label">% –ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                                <div className="stats-value">
                                    {parameters.length ? Math.round(100 * parameters.filter(p => p.status === '–ê–∫—Ç–∏–≤–µ–Ω').length / parameters.length) : 0}%
                                </div>
                            </div>
                        </div>

                        <div className="top-actions-row">
                            <input
                                type="text"
                                className="search-input"
                                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É..."
                                value={search}
                                onChange={e => setSearch(e.target.value)}
                            />
                            <select
                                className="filter-select"
                                value={statusFilter}
                                onChange={e => setStatusFilter(e.target.value)}
                            >
                                <option>–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                                <option>–ê–∫—Ç–∏–≤–µ–Ω</option>
                                <option>–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</option>
                            </select>
                            <button className="create-button" onClick={openNewParamModal}>
                                + –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä
                            </button>
                        </div>

                        <table>
                            <thead>
                            <tr>
                                <th>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä</th>
                                <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                            </thead>
                            <tbody>
                            {loading ? (
                                <tr>
                                    <td colSpan="6">–ó–∞–≥—Ä—É–∑–∫–∞...</td>
                                </tr>
                            ) : filteredParameters.length === 0 ? (
                                <tr>
                                    <td colSpan="6">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td>
                                </tr>
                            ) : (
                                filteredParameters.map(param => (
                                    <tr key={param.id}>
                                        <td><span className="mini-tag">{param.id}</span></td>
                                        <td>{param.value}</td>
                                        <td><span className="mini-tag">{param.name}</span></td>
                                        <td>{param.description}</td>
                                        <td>
                                    <span className={param.status === '–ê–∫—Ç–∏–≤–µ–Ω' ? 'status-active' : 'status-inactive'}>
                                        {param.status}
                                    </span>
                                        </td>
                                        <td>
                                            <button className="edit-btn" onClick={() => openEditParamModal(param)}>‚úèÔ∏è
                                            </button>
                                            <button className="delete-btn" onClick={() => handleDeleteParam(param.id)}>üóëÔ∏è
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>

                        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
                        {modalOpen && (
                            <div className="modal-overlay" onClick={() => setModalOpen(false)}>
                                <div className="modal-window" onClick={e => e.stopPropagation()}>
                                    <h3>{isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä'}</h3>
                                    <form className="modal-form" onSubmit={handleSaveParam}>
                                        <input
                                            required
                                            placeholder="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"
                                            value={currentParam.id}
                                            disabled={isEditing}
                                            onChange={e => setCurrentParam({...currentParam, id: e.target.value})}
                                        />
                                        <input
                                            required
                                            placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ"
                                            value={currentParam.value}
                                            onChange={e => setCurrentParam({...currentParam, value: e.target.value})}
                                        />
                                        <input
                                            required
                                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                                            value={currentParam.name}
                                            onChange={e => setCurrentParam({...currentParam, name: e.target.value})}
                                        />
                                        <input
                                            required
                                            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                                            value={currentParam.description}
                                            onChange={e => setCurrentParam({...currentParam, description: e.target.value})}
                                        />
                                        <select
                                            value={currentParam.status}
                                            onChange={e => setCurrentParam({...currentParam, status: e.target.value})}
                                        >
                                            <option>–ê–∫—Ç–∏–≤–µ–Ω</option>
                                            <option>–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</option>
                                        </select>
                                        <div className="modal-actions">
                                            <button type="submit" className="create-button">
                                                {isEditing ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
                                            </button>
                                            <button type="button" className="cancel-btn"
                                                    onClick={() => setModalOpen(false)}>
                                                –û—Ç–º–µ–Ω–∞
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        )}
                    </div>
                ) : (<div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>)
            }
        </>
    );
}

export default ParametrsPage;
