<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Facades\DB;

class QueueMonitor extends Command
{
    protected $signature = 'queue:monitor {--interval=1}';
    protected $description = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏';

    public function handle()
    {
        $interval = (int) $this->option('interval');

        $this->info("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ Redis (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {$interval} —Å–µ–∫)");
        $this->info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
        $this->newLine();

        $startTime = now();
        $previousQueueSize = 0;
        $previousProcessed = 0;

        while (true) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
            $queueSize = Redis::llen('queues:task-assignment');
            $failedCount = Redis::llen('queues:task-assignment:failed');
            $delayedCount = Redis::zcard('queues:task-assignment:delayed');

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –ë–î
            $totalProcessed = DB::table('tasks')->count();
            $processedToday = DB::table('tasks')
                ->whereDate('assigned_at', today())
                ->count();

            // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            $processed = $totalProcessed - $previousProcessed;
            $rps = $processed / $interval;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –æ—á–µ—Ä–µ–¥–∏
            $trend = '';
            if ($queueSize > $previousQueueSize) {
                $trend = 'üìà –†–∞—Å—Ç–µ—Ç';
            } elseif ($queueSize < $previousQueueSize) {
                $trend = 'üìâ –£–º–µ–Ω—å—à–∞–µ—Ç—Å—è';
            } else {
                $trend = '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ';
            }

            // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            $uptime = $startTime->diffForHumans(null, true);

            // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            $this->clearScreen();

            $this->info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ - {$uptime}");
            $this->newLine();

            $this->table(
                ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                [
                    ['üì¶ –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏', number_format($queueSize) . " {$trend}"],
                    ['‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏', round($rps, 2) . ' jobs/sec'],
                    ['‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ', number_format($totalProcessed)],
                    ['üìÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è', number_format($processedToday)],
                    ['‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö', number_format($failedCount)],
                    ['‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö', number_format($delayedCount)],
                    ['üìä ETA (–ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏)', $this->calculateETA($queueSize, $rps)],
                ]
            );

            // –í–æ—Ä–∫–µ—Ä—ã (–ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
            $this->newLine();
            $this->info("üë∑ –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã:");
            $this->showWorkers();

            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            $this->newLine();
            $this->info("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:");
            $this->showRecentTasks();

            $previousQueueSize = $queueSize;
            $previousProcessed = $totalProcessed;

            sleep($interval);
        }
    }

    private function calculateETA($queueSize, $rps): string
    {
        if ($rps <= 0 || $queueSize <= 0) {
            return 'N/A';
        }

        $seconds = (int) ($queueSize / $rps);

        if ($seconds < 60) {
            return "{$seconds} —Å–µ–∫";
        } elseif ($seconds < 3600) {
            $minutes = (int) ($seconds / 60);
            return "{$minutes} –º–∏–Ω";
        } else {
            $hours = (int) ($seconds / 3600);
            $minutes = (int) (($seconds % 3600) / 60);
            return "{$hours} —á {$minutes} –º–∏–Ω";
        }
    }

    private function showWorkers()
    {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–∑ Redis
        $workers = Redis::smembers('workers');

        if (empty($workers)) {
            $this->line("  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Ä–∫–µ—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            $this->line("  üí° –ó–∞–ø—É—â–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ docker-compose: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ sail ps");
            return;
        }

        foreach ($workers as $worker) {
            $this->line("  ‚Ä¢ {$worker}");
        }
    }

    private function showRecentTasks()
    {
        $recentTasks = DB::table('tasks')
            ->orderBy('assigned_at', 'desc')
            ->limit(5)
            ->get(['task_id', 'title', 'user_id', 'assigned_at']);

        if ($recentTasks->isEmpty()) {
            $this->line("  –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á");
            return;
        }

        foreach ($recentTasks as $task) {
            $time = \Carbon\Carbon::parse($task->assigned_at)->diffForHumans();
            $this->line("  ‚Ä¢ [{$task->task_id}] {$task->title} ‚Üí User #{$task->user_id} ({$time})");
        }
    }

    private function clearScreen()
    {
        if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
            system('cls');
        } else {
            system('clear');
        }
    }
}
